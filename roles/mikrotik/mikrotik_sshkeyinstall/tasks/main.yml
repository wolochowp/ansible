# SPDX-License-Identifier: MIT-0
---
- name: Set initial list of users from input
  set_fact:
    _raw_input_users: "{{ mikrotik_ssh_users }}"

# --- User existence verification ---

- name: Get detailed user list from MikroTik
  community.routeros.command:
    commands:
      - /user print detail
  register: mikrotik_users_detail
  when: verify_users_exist | default(false)

- name: Parse MikroTik user list
  set_fact:
    existing_mikrotik_users: "{{ mikrotik_users_detail.stdout[0] | regex_findall('name=\"([^\"]+)\"') }}"
  when: verify_users_exist | default(false)

- name: Find users not existing on MikroTik
  set_fact:
    invalid_users: >-
      {{
        _raw_input_users
        | rejectattr('name', 'in', existing_mikrotik_users | default([]))
        | list
      }}
  when: verify_users_exist | default(false)

- name: Warn about users not found on MikroTik
  debug:
    msg: "Skipping users not found on MikroTik: {{ invalid_users | map(attribute='name') | join(', ') }}"
  when: verify_users_exist and invalid_users | length > 0 and not fail_on_invalid_user

- name: Fail if invalid users found and fail_on_invalid_user is true
  fail:
    msg: "Invalid users found (not existing on MikroTik): {{ invalid_users | map(attribute='name') | join(', ') }}"
  when: verify_users_exist and fail_on_invalid_user and invalid_users | length > 0

- name: Set user_verified_users (filtered by existence if verification enabled)
  set_fact:
    user_verified_users: >-
      {{
        (verify_users_exist | default(false)) 
        | ternary(
            _raw_input_users
            | selectattr('name', 'in', existing_mikrotik_users | default([]))
            | list,
            _raw_input_users
          )
      }}

# --- Public key validation ---

- name: Initialize validated_ssh_users list
  set_fact:
    validated_ssh_users: []
  when: verify_pubkeys | default(false)

- name: Load public keys and add pubkey_type, pubkey_data, pubkey_filename
  set_fact:
    validated_ssh_users: "{{ validated_ssh_users + [ user_with_key ] }}"
  loop: "{{ user_verified_users | selectattr('pubkey_file', 'defined') | list }}"
  vars:
    key_path: "{{ role_path }}/files/{{ item.pubkey_file }}"
    pubkey_data: "{{ lookup('file', key_path) }}"
    pubkey_type: "{{ pubkey_data.split()[0] }}"
    user_with_key: >-
      {{
        item | combine({
          'pubkey_type': pubkey_type,
          'pubkey_data': pubkey_data,
          'pubkey_filename': item.pubkey_file
        })
      }}
  when: verify_pubkeys | default(false)

- name: Separate valid and invalid keys
  set_fact:
    valid_key_users: >-
      {{ validated_ssh_users | selectattr('pubkey_type', 'in', ['ssh-rsa', 'ssh-ed25519']) | list }}
    invalid_key_users: >-
      {{ validated_ssh_users | rejectattr('pubkey_type', 'in', ['ssh-rsa', 'ssh-ed25519']) | list }}
  when: verify_pubkeys | default(false)

- name: Warn about invalid keys
  debug:
    msg: >-
      Skipping users with invalid public key files:
      {{ invalid_key_users | map(attribute='pubkey_filename') | join(', ') }}
  when: verify_pubkeys and invalid_key_users | length > 0 and not fail_on_invalid_pubkey

- name: Fail on invalid keys if required
  fail:
    msg: >-
      The following public key files are invalid or unsupported (must be ssh-rsa or ssh-ed25519):
      {{ invalid_key_users | map(attribute='pubkey_filename') | join(', ') }}
  when: verify_pubkeys and fail_on_invalid_pubkey and invalid_key_users | length > 0

# --- Prepare final list for deployment ---

- name: Set final_ssh_users to those with valid keys if verifying pubkeys, else to user_verified_users
  set_fact:
    final_ssh_users: >-
      {{
        (verify_pubkeys | default(false))
        | ternary(valid_key_users, user_verified_users)
      }}

# --- Optionally flush keys on MikroTik ---

- name: Optionally flush all existing ssh keys for each user
  community.routeros.command:
    commands:
      - "/user ssh-keys remove [find user={{ item.name }}]"
  loop: "{{ final_ssh_users }}"
  when: allow_flushing_pubkeys

# --- Upload and import keys ---

- name: Upload public key files to MikroTik device
  ansible.netcommon.net_put:
    src: "{{ role_path }}/files/{{ item.pubkey_file }}"
    dest: "{{ item.pubkey_file }}"
  loop: "{{ final_ssh_users }}"

- name: Import public keys on MikroTik device
  community.routeros.command:
    commands:
      - "/user ssh-keys import public-key-file={{ item.pubkey_file }} user={{ item.name }}"
  loop: "{{ final_ssh_users }}"
